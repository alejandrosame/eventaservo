---
http_interactions:
- request:
    method: get
    uri: https://events.duolingo.com/events/details/duolingo-washington-dc-esperanto-presents-esperanto-meetup-in-washington-dc/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - nginx
      Date:
      - Mon, 02 Sep 2019 15:41:09 GMT
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      Content-Language:
      - en
      Etag:
      - W/"f4d0b70e3250a51655d0c4f79b870abf"
      X-Frame-Options:
      - SAMEORIGIN
      Set-Cookie:
      - correlation_key="duolingo/22c1df56-a99e-4165-999f-b78cf431ed92"; Path=/; secure
      - csrftoken=EjZQYmAtD7Z1xFcciceDcB6nYbyc6FVdmow8RzkOz2lxgMqF8gWWa35Ntrgq0p8E;
        expires=Mon, 31-Aug-2020 15:41:08 GMT; httponly; Max-Age=31449600; Path=/;
        secure
      Strict-Transport-Security:
      - max-age=63072000; includeSubDomains; preload
      Via:
      - 1.1 google, 1.1 54b7a6e04e496eb001a345a89b73b306.cloudfront.net (CloudFront)
      Alt-Svc:
      - clear
      Vary:
      - Accept-Encoding,Cookie,Accept-Language
      X-Cache:
      - Hit from cloudfront
      X-Amz-Cf-Pop:
      - MAD51-C1
      X-Amz-Cf-Id:
      - BzY4giZXOlox_8aUayzvt_kjoNM8OOGc5O3c5RBTDiQTlU43NkW6YA==
      Age:
      - '2155'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 02 Sep 2019 16:17:04 GMT
- request:
    method: get
    uri: https://events.duolingo.com/api/event/990
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - nginx
      Date:
      - Mon, 02 Sep 2019 16:17:04 GMT
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      Content-Language:
      - en
      Expires:
      - Mon, 02 Sep 2019 16:17:04 GMT
      Allow:
      - GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS
      Cache-Control:
      - no-cache, no-store, must-revalidate, max-age=0
      X-Frame-Options:
      - SAMEORIGIN
      Strict-Transport-Security:
      - max-age=63072000; includeSubDomains; preload
      Via:
      - 1.1 google, 1.1 87b11e70acdfe9b743ff7afc9f644f83.cloudfront.net (CloudFront)
      Alt-Svc:
      - clear
      Vary:
      - Accept-Encoding,Accept-Language,Cookie
      X-Cache:
      - Miss from cloudfront
      X-Amz-Cf-Pop:
      - MAD51-C1
      X-Amz-Cf-Id:
      - oJXckzQgVQK1y2glkgE2FLv7lXf5TSNZ2Zt8g37lDOXmXipEjLbARw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 02 Sep 2019 16:17:04 GMT
recorded_with: VCR 5.0.0
